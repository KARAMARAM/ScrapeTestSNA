import pandas as pd
import re
from collections import defaultdict
import pycountry

# Install required packages if not already installed
# !pip install pycountry

def is_russian_location(entity, entity_type):
    """
    Determine if a location entity is Russian or Russia-related
    """
    if entity_type != 'LOC':
        return True  # Keep all non-location entities
    
    entity_lower = entity.lower().strip()
    
    # Russian administrative divisions (oblasts, krais, republics, etc.)
    russian_administrative_terms = [
        'область', 'области', 'областью', 'областе', 'области',
        'край', 'края', 'краю', 'краем', 'крае',
        'республика', 'республики', 'республику', 'республикой', 'республике',
        'автономный округ', 'автономного округа', 'автономному округу',
        'автономная область', 'автономной области', 'автономную область',
        'федеральный округ', 'федерального округа', 'федеральному округу'
    ]
    
    # Check if entity contains Russian administrative terms
    for term in russian_administrative_terms:
        if term in entity_lower:
            return True
    
    # List of Russian cities (major ones)
    russian_cities = {
        'москва', 'москве', 'москвы', 'москву', 'москвой',
        'санкт-петербург', 'петербург', 'петербурга', 'петербурге',
        'новосибирск', 'новосибирска', 'новосибирске',
        'екатеринбург', 'екатеринбурга', 'екатеринбурге',
        'нижний новгород', 'нижнего новгорода', 'нижнем новгороде',
        'казань', 'казани', 'казанью',
        'челябинск', 'челябинска', 'челябинске',
        'омск', 'омска', 'омске',
        'самара', 'самары', 'самаре', 'самарой',
        'ростов-на-дону', 'ростова-на-дону', 'ростове-на-дону',
        'уфа', 'уфы', 'уфе', 'уфой',
        'красноярск', 'красноярска', 'красноярске',
        'воронеж', 'воронежа', 'воронеже',
        'пермь', 'перми', 'пермью',
        'волгоград', 'волгограда', 'волгограде',
        'краснодар', 'краснодара', 'краснодаре',
        'саратов', 'саратова', 'саратове',
        'тюмень', 'тюмени', 'тюменью',
        'тольятти', 'тольятти',
        'ижевск', 'ижевска', 'ижевске',
        'барнаул', 'барнаула', 'барнауле',
        'ульяновск', 'ульяновска', 'ульяновске',
        'иркутск', 'иркутска', 'иркутске',
        'хабаровск', 'хабаровска', 'хабаровске',
        'ярославль', 'ярославля', 'ярославле',
        'владивосток', 'владивостока', 'владивостоке',
        'махачкала', 'махачкалы', 'махачкале',
        'томск', 'томска', 'томске',
        'оренбург', 'оренбурга', 'оренбурге',
        'кемерово', 'кемерова', 'кемерове',
        'рязань', 'рязани', 'рязанью',
        'астрахань', 'астрахани', 'астраханью',
        'пенза', 'пензы', 'пензе', 'пензой',
        'липецк', 'липецка', 'липецке',
        'тула', 'тулы', 'туле', 'тулой',
        'киров', 'кирова', 'кирове',
        'чебоксары', 'чебоксар', 'чебоксарах',
        'калининград', 'калининграда', 'калининграде',
        'брянск', 'брянска', 'брянске',
        'курск', 'курска', 'курске',
        'иваново', 'иванова', 'иванове',
        'магнитогорск', 'магнитогорска', 'магнитогорске',
        'тверь', 'твери', 'тверью',
        'ставрополь', 'ставрополя', 'ставрополе',
        'нижний тагил', 'нижнего тагила', 'нижнем тагиле',
        'белгород', 'белгорода', 'белгороде',
        'архангельск', 'архангельска', 'архангельске',
        'владимир', 'владимира', 'владимире',
        'сочи', 'сочи',
        'курган', 'кургана', 'кургане',
        'смоленск', 'смоленска', 'смоленске',
        'калуга', 'калуги', 'калуге', 'калугой',
        'чита', 'читы', 'чите', 'читой',
        'орёл', 'орла', 'орле',
        'волжский', 'волжского', 'волжском',
        'череповец', 'череповца', 'череповце',
        'владикавказ', 'владикавказа', 'владикавказе',
        'мурманск', 'мурманска', 'мурманске',
        'сургут', 'сургута', 'сургуте',
        'вологда', 'вологды', 'вологде', 'вологдой',
        'тамбов', 'тамбова', 'тамбове',
        'стерлитамак', 'стерлитамака', 'стерлитамаке',
        'грозный', 'грозного', 'грозном',
        'якутск', 'якутска', 'якутске',
        'кострома', 'костромы', 'костроме', 'костромой',
        'комсомольск-на-амуре', 'комсомольска-на-амуре', 'комсомольске-на-амуре',
        'петрозаводск', 'петрозаводска', 'петрозаводске',
        'таганрог', 'таганрога', 'таганроге',
        'нижневартовск', 'нижневартовска', 'нижневартовске',
        'йошкар-ола', 'йошкар-олы', 'йошкар-оле',
        'братск', 'братска', 'братске',
        'новороссийск', 'новороссийска', 'новороссийске',
        'дзержинск', 'дзержинска', 'дзержинске',
        'шахты', 'шахт', 'шахтах',
        'орск', 'орска', 'орске',
        'ангарск', 'ангарска', 'ангарске',
        'балашиха', 'балашихи', 'балашихе', 'балашихой',
        'северодвинск', 'северодвинска', 'северодвинске',
        'псков', 'пскова', 'пскове',
        'химки', 'химок', 'химках',
        'энгельс', 'энгельса', 'энгельсе'
    }
    
    # Check if entity is a known Russian city
    if entity_lower in russian_cities:
        return True
    
    # Russian regions and republics
    russian_regions = {
        'адыгея', 'адыгеи', 'адыгею', 'адыгеей',
        'алтай', 'алтая', 'алтаю', 'алтаем', 'алтайский край',
        'амурская область', 'амурской области', 'амурскую область',
        'архангельская область', 'архангельской области', 'архангельскую область',
        'астраханская область', 'астраханской области', 'астраханскую область',
        'башкортостан', 'башкортостана', 'башкортостану', 'башкортостаном',
        'белгородская область', 'белгородской области', 'белгородскую область',
        'брянская область', 'брянской области', 'брянскую область',
        'бурятия', 'бурятии', 'бурятию', 'бурятией',
        'владимирская область', 'владимирской области', 'владимирскую область',
        'волгоградская область', 'волгоградской области', 'волгоградскую область',
        'вологодская область', 'вологодской области', 'вологодскую область',
        'воронежская область', 'воронежской области', 'воронежскую область',
        'дагестан', 'дагестана', 'дагестану', 'дагестаном',
        'еврейская автономная область', 'еврейской автономной области',
        'забайкальский край', 'забайкальского края', 'забайкальскому краю',
        'ивановская область', 'ивановской области', 'ивановскую область',
        'ингушетия', 'ингушетии', 'ингушетию', 'ингушетией',
        'иркутская область', 'иркутской области', 'иркутскую область',
        'кабардино-балкария', 'кабардино-балкарии', 'кабардино-балкарию',
        'калининградская область', 'калининградской области', 'калининградскую область',
        'калмыкия', 'калмыкии', 'калмыкию', 'калмыкией',
        'калужская область', 'калужской области', 'калужскую область',
        'камчатский край', 'камчатского края', 'камчатскому краю',
        'карачаево-черкесия', 'карачаево-черкесии', 'карачаево-черкесию',
        'карелия', 'карелии', 'карелию', 'карелией',
        'кемеровская область', 'кемеровской области', 'кемеровскую область',
        'кировская область', 'кировской области', 'кировскую область',
        'коми', 'коми',
        'костромская область', 'костромской области', 'костромскую область',
        'краснодарский край', 'краснодарского края', 'краснодарскому краю',
        'красноярский край', 'красноярского края', 'красноярскому краю',
        'курганская область', 'курганской области', 'курганскую область',
        'курская область', 'курской области', 'курскую область',
        'ленинградская область', 'ленинградской области', 'ленинградскую область',
        'липецкая область', 'липецкой области', 'липецкую область',
        'магаданская область', 'магаданской области', 'магаданскую область',
        'марий эл', 'марий эл',
        'мордовия', 'мордовии', 'мордовию', 'мордовией',
        'московская область', 'московской области', 'московскую область',
        'мурманская область', 'мурманской области', 'мурманскую область',
        'ненецкий автономный округ', 'ненецкого автономного округа',
        'нижегородская область', 'нижегородской области', 'нижегородскую область',
        'новгородская область', 'новгородской области', 'новгородскую область',
        'новосибирская область', 'новосибирской области', 'новосибирскую область',
        'омская область', 'омской области', 'омскую область',
        'оренбургская область', 'оренбургской области', 'оренбургскую область',
        'орловская область', 'орловской области', 'орловскую область',
        'пензенская область', 'пензенской области', 'пензенскую область',
        'пермский край', 'пермского края', 'пермскому краю',
        'приморский край', 'приморского края', 'приморскому краю',
        'псковская область', 'псковской области', 'псковскую область',
        'ростовская область', 'ростовской области', 'ростовскую область',
        'рязанская область', 'рязанской области', 'рязанскую область',
        'самарская область', 'самарской области', 'самарскую область',
        'саратовская область', 'саратовской области', 'саратовскую область',
        'сахалинская область', 'сахалинской области', 'сахалинскую область',
        'свердловская область', 'свердловской области', 'свердловскую область',
        'северная осетия', 'северной осетии', 'северную осетию',
        'смоленская область', 'смоленской области', 'смоленскую область',
        'ставропольский край', 'ставропольского края', 'ставропольскому краю',
        'тамбовская область', 'тамбовской области', 'тамбовскую область',
        'татарстан', 'татарстана', 'татарстану', 'татарстаном',
        'тверская область', 'тверской области', 'тверскую область',
        'томская область', 'томской области', 'томскую область',
        'тульская область', 'тульской области', 'тульскую область',
        'тыва', 'тывы', 'тыве', 'тывой',
        'тюменская область', 'тюменской области', 'тюменскую область',
        'удмуртия', 'удмуртии', 'удмуртию', 'удмуртией',
        'ульяновская область', 'ульяновской области', 'ульяновскую область',
        'хабаровский край', 'хабаровского края', 'хабаровскому краю',
        'хакасия', 'хакасии', 'хакасию', 'хакасией',
        'ханты-мансийский автономный округ', 'ханты-мансийского автономного округа',
        'челябинская область', 'челябинской области', 'челябинскую область',
        'чеченская республика', 'чеченской республики', 'чеченскую республику',
        'чувашия', 'чувашии', 'чувашию', 'чувашией',
        'чукотский автономный округ', 'чукотского автономного округа',
        'ямало-ненецкий автономный округ', 'ямало-ненецкого автономного округа',
        'ярославская область', 'ярославской области', 'ярославскую область',
        'крым', 'крыма', 'крыму', 'крымом',
        'севастополь', 'севастополя', 'севастополю', 'севастополем',
        'донецкая народная республика', 'днр',
        'луганская народная республика', 'лнр',
        'запорожская область', 'херсонская область'
    }
    
    # Check if entity is a known Russian region
    if entity_lower in russian_regions:
        return True
    
    # Non-Russian countries and major foreign locations to exclude
    foreign_locations = {
        'сша', 'америка', 'соединенные штаты', 'соединенных штатов',
        'китай', 'китая', 'китаю', 'китаем', 'кнр',
        'украина', 'украины', 'украину', 'украиной', 'украине',
        'беларусь', 'белоруссия', 'белоруссии', 'белоруссию',
        'казахстан', 'казахстана', 'казахстану', 'казахстаном',
        'германия', 'германии', 'германию', 'германией',
        'франция', 'франции', 'францию', 'францией',
        'великобритания', 'британия', 'британии', 'британию',
        'италия', 'италии', 'италию', 'италией',
        'испания', 'испании', 'испанию', 'испанией',
        'япония', 'японии', 'японию', 'японией',
        'индия', 'индии', 'индию', 'индией',
        'бразилия', 'бразилии', 'бразилию', 'бразилией',
        'канада', 'канады', 'канаду', 'канадой',
        'австралия', 'австралии', 'австралию', 'австралией',
        'турция', 'турции', 'турцию', 'турцией',
        'иран', 'ирана', 'ирану', 'ираном',
        'ирак', 'ирака', 'ираку', 'ираком',
        'сирия', 'сирии', 'сирию', 'сирией',
        'израиль', 'израиля', 'израилю', 'израилем',
        'египет', 'египта', 'египту', 'египтом',
        'саудовская аравия', 'саудовской аравии', 'саудовскую аравию',
        'оаэ', 'эмираты', 'эмиратов', 'эмираты',
        'катар', 'катара', 'катару', 'катаром',
        'кувейт', 'кувейта', 'кувейту', 'кувейтом',
        'южная корея', 'южной кореи', 'южную корею',
        'северная корея', 'северной кореи', 'северную корею',
        'вьетнам', 'вьетнама', 'вьетнаму', 'вьетнамом',
        'таиланд', 'таиланда', 'таиланду', 'таиландом',
        'индонезия', 'индонезии', 'индонезию', 'индонезией',
        'малайзия', 'малайзии', 'малайзию', 'малайзией',
        'сингапур', 'сингапура', 'сингапуру', 'сингапуром',
        'филиппины', 'филиппин', 'филиппинам', 'филиппинами',
        'пакистан', 'пакистана', 'пакистану', 'пакистаном',
        'афганистан', 'афганистана', 'афганистану', 'афганистаном',
        'узбекистан', 'узбекистана', 'узбекистану', 'узбекистаном',
        'таджикистан', 'таджикистана', 'таджикистану', 'таджикистаном',
        'киргизия', 'киргизии', 'киргизию', 'киргизией',
        'туркменистан', 'туркменистана', 'туркменистану', 'туркменистаном',
        'азербайджан', 'азербайджана', 'азербайджану', 'азербайджаном',
        'армения', 'армении', 'армению', 'арменией',
        'грузия', 'грузии', 'грузию', 'грузией',
        'молдова', 'молдовы', 'молдову', 'молдовой',
        'польша', 'польши', 'польшу', 'польшей',
        'чехия', 'чехии', 'чехию', 'чехией',
        'словакия', 'словакии', 'словакию', 'словакией',
        'венгрия', 'венгрии', 'венгрию', 'венгрией',
        'румыния', 'румынии', 'румынию', 'румынией',
        'болгария', 'болгарии', 'болгарию', 'болгарией',
        'сербия', 'сербии', 'сербию', 'сербией',
        'хорватия', 'хорватии', 'хорватию', 'хорватией',
        'словения', 'словении', 'словению', 'словенией',
        'босния', 'боснии', 'боснию', 'боснией',
        'черногория', 'черногории', 'черногорию', 'черногорией',
        'македония', 'македонии', 'македонию', 'македонией',
        'албания', 'албании', 'албанию', 'албанией',
        'греция', 'греции', 'грецию', 'грецией',
        'кипр', 'кипра', 'кипру', 'кипром',
        'мальта', 'мальты', 'мальту', 'мальтой',
        'португалия', 'португалии', 'португалию', 'португалией',
        'нидерланды', 'нидерландов', 'нидерландам', 'нидерландами',
        'бельгия', 'бельгии', 'бельгию', 'бельгией',
        'люксембург', 'люксембурга', 'люксембургу', 'люксембургом',
        'австрия', 'австрии', 'австрию', 'австрией',
        'швейцария', 'швейцарии', 'швейцарию', 'швейцарией',
        'швеция', 'швеции', 'швецию', 'швецией',
        'норвегия', 'норвегии', 'норвегию', 'норвегией',
        'дания', 'дании', 'данию', 'данией',
        'финляндия', 'финляндии', 'финляндию', 'финляндией',
        'исландия', 'исландии', 'исландию', 'исландией',
        'ирландия', 'ирландии', 'ирландию', 'ирландией',
        'эстония', 'эстонии', 'эстонию', 'эстонией',
        'латвия', 'латвии', 'латвию', 'латвией',
        'литва', 'литвы', 'литву', 'литвой',
        'европа', 'европы', 'европу', 'европой',
        'евросоюз', 'евросоюза', 'евросоюзу', 'евросоюзом',
        'азия', 'азии', 'азию', 'азией',
        'африка', 'африки', 'африку', 'африкой',
        'америка', 'америки', 'америку', 'америкой',
        'океания', 'океании', 'океанию', 'океанией',
        'антарктида', 'антарктиды', 'антарктиду', 'антарктидой'
    }
    
    # Check if entity is a known foreign location
    if entity_lower in foreign_locations:
        return False
    
    # Foreign cities to exclude
    foreign_cities = {
        'вашингтон', 'вашингтона', 'вашингтону', 'вашингтоном',
        'нью-йорк', 'нью-йорка', 'нью-йорку', 'нью-йорком',
        'лос-анджелес', 'лос-анджелеса', 'лос-анджелесу', 'лос-анджелесом',
        'чикаго', 'чикаго',
        'пекин', 'пекина', 'пекину', 'пекином',
        'шанхай', 'шанхая', 'шанхаю', 'шанхаем',
        'токио', 'токио',
        'осака', 'осаки', 'осаке', 'осакой',
        'сеул', 'сеула', 'сеулу', 'сеулом',
        'дели', 'дели',
        'мумбаи', 'мумбаи',
        'лондон', 'лондона', 'лондону', 'лондоном',
        'париж', 'парижа', 'парижу', 'парижем',
        'берлин', 'берлина', 'берлину', 'берлином',
        'рим', 'рима', 'риму', 'римом',
        'мадрид', 'мадрида', 'мадриду', 'мадридом',
        'барселона', 'барселоны', 'барселону', 'барселоной',
        'амстердам', 'амстердама', 'амстердаму', 'амстердамом',
        'брюссель', 'брюсселя', 'брюсселю', 'брюсселем',
        'вена', 'вены', 'вену', 'веной',
        'прага', 'праги', 'прагу', 'прагой',
        'будапешт', 'будапешта', 'будапешту', 'будапештом',
        'варшава', 'варшавы', 'варшаву', 'варшавой',
        'стокгольм', 'стокгольма', 'стокгольму', 'стокгольмом',
        'осло', 'осло',
        'копенгаген', 'копенгагена', 'копенгагену', 'копенгагеном',
        'хельсинки', 'хельсинки',
        'киев', 'киева', 'киеву', 'киевом',
        'минск', 'минска', 'минску', 'минском',
        'алматы', 'алматы',
        'астана', 'астаны', 'астану', 'астаной',
        'ташкент', 'ташкента', 'ташкенту', 'ташкентом',
        'баку', 'баку',
        'ереван', 'еревана', 'еревану', 'ереваном',
        'тбилиси', 'тбилиси',
        'анкара', 'анкары', 'анкару', 'анкарой',
        'стамбул', 'стамбула', 'стамбулу', 'стамбулом',
        'тегеран', 'тегерана', 'тегерану', 'тегераном',
        'багдад', 'багдада', 'багдаду', 'багдадом',
        'дамаск', 'дамаска', 'дамаску', 'дамаском',
        'каир', 'каира', 'каиру', 'каиром',
        'эр-рияд', 'эр-рияда', 'эр-рияду', 'эр-риядом',
        'доха', 'дохи', 'доху', 'дохой',
        'дубай', 'дубая', 'дубаю', 'дубаем',
        'абу-даби', 'абу-даби'
    }
    
    # Check if entity is a known foreign city
    if entity_lower in foreign_cities:
        return False
    
    # If we can't determine definitively, assume it's Russian (conservative approach)
    # This ensures we don't accidentally remove Russian locations we don't know about
    return True

def canonicalize_entity(entity):
    """
    Canonicalize entity names to merge variants under single canonical forms
    """
    entity_clean = str(entity).strip()
    entity_norm = entity_clean.lower()
    
    # Remove extra whitespace and punctuation for matching
    entity_norm = re.sub(r'\s+', ' ', entity_norm)
    entity_norm = re.sub(r'[().,;:!?\"\']', '', entity_norm)
    entity_norm = entity_norm.strip()
    
    # RDIF variants - all map to "РФПИ"
    rdif_patterns = [
        r'^рфпи$',
        r'^российского фонда прямых инвестиций$',
        r'^российский фонд прямых инвестиций$',
        r'^российского фонда прямых инвестиций рфпи$',
        r'^российский фонд прямых инвестиций рфпи$',
        r'^russian direct investment fund$',
        r'^rdif$'
    ]
    
    for pattern in rdif_patterns:
        if re.match(pattern, entity_norm):
            return 'РФПИ'
    
    # Putin variants - all map to "Владимир Путин"
    putin_patterns = [
        r'^владимир путин$',
        r'^владимира путина$',
        r'^путин$',
        r'^путина$',
        r'^в путин$',
        r'^владимир владимирович путин$'
    ]
    
    for pattern in putin_patterns:
        if re.match(pattern, entity_norm):
            return 'Владимир Путин'
    
    # Dmitriev variants - all map to "Кирилл Дмитриев"
    dmitriev_patterns = [
        r'^кирилл дмитриев$',
        r'^кирилла дмитриева$',
        r'^дмитриева$',
        r'^к дмитриев$',
        r'^кирилл александрович дмитриев$'
    ]
    
    for pattern in dmitriev_patterns:
        if re.match(pattern, entity_norm):
            return 'Кирилл Дмитриев'
    
    # Trump variants - all map to "Дональд Трамп"
    trump_patterns = [
        r'^дональд трамп$',
        r'^дональда трампа$',
        r'^трамп$',
        r'^трампа$',
        r'^д трамп$',
        r'^donald trump$'
    ]
    
    for pattern in trump_patterns:
        if re.match(pattern, entity_norm):
            return 'Дональд Трамп'
    
    # Return original entity if no canonicalization needed
    return entity_clean

def clean_and_filter_russian_locations(input_file, output_file, min_occurrences=5):
    """
    Main function to clean, normalize, and filter for Russian locations only
    """
    print("Loading dataset...")
    df = pd.read_csv(input_file)
    print(f"Initial dataset size: {len(df):,} rows")
    print(f"Initial columns: {df.columns.tolist()}")
    print(f"Unique entities before cleaning: {df['Entity'].nunique():,}")
    
    # 1. Apply entity canonicalization
    print("\nCanonicalizing entity names...")
    df['Entity_canonical'] = df['Entity'].apply(canonicalize_entity)
    
    # 2. Filter for Russian locations only
    print("Filtering for Russian locations only...")
    initial_count = len(df)
    df = df[df.apply(lambda row: is_russian_location(row['Entity_canonical'], row['Entity_Type']), axis=1)]
    print(f"Removed {initial_count - len(df):,} non-Russian location mentions")
    
    # 3. Refined blacklist (excluding non-Russian locations which are already filtered)
    BLACKLIST = {
        # Generic government institutions
        'правительство', 'правительства', 'правительству', 'правительством',
        'президент', 'президента', 'президенту', 'президентом',
        'министерство', 'министерства', 'министерству', 'министерством',
        'минздрав', 'мид', 'минфин', 'минэкономразвития',
        'кремль', 'кремля', 'кремлю', 'кремлем',
        'госдума', 'совет федерации', 'парламент',
        
        # News agencies and media
        'тасс', 'итар-тасс', 'прайм', 'сми', 'смиа',
        'риа новости', 'рбк', 'коммерсантъ', 'ведомости',
        'интерфакс', 'россия сегодня', 'rt', 'russia today',
        'bbc', 'cnn', 'reuters', 'bloomberg', 'ap', 'afp',
        'dw', 'france24', 'euronews',
        
        # Generic organizational terms
        'агентство', 'служба', 'комитет', 'департамент',
        'управление', 'администрация', 'ведомство',
        'корпорация', 'холдинг', 'группа компаний',
        
        # Generic financial/economic terms
        'банк', 'банка', 'банку', 'банком',
        'биржа', 'биржи', 'бирже', 'биржей',
        'рынок', 'рынка', 'рынку', 'рынком',
        'экономика', 'экономики', 'экономике', 'экономикой',
        
        # Generic titles and positions
        'директор', 'директора', 'директору', 'директором',
        'руководитель', 'руководителя', 'руководителю', 'руководителем',
        'председатель', 'председателя', 'председателю', 'председателем',
        'заместитель', 'заместителя', 'заместителю', 'заместителем',
        'министр', 'министра', 'министру', 'министром',
        'губернатор', 'губернатора', 'губернатору', 'губернатором',
        'мэр', 'мэра', 'мэру', 'мэром',
        
        # Generic company/organization suffixes
        'ооо', 'зао', 'оао', 'ао', 'пао', 'нко',
        'ltd', 'llc', 'inc', 'corp', 'gmbh',
        
        # Other generic terms
        'компания', 'компании', 'компанию', 'компанией',
        'организация', 'организации', 'организацию', 'организацией',
        'учреждение', 'учреждения', 'учреждению', 'учреждением',
        'фирма', 'фирмы', 'фирму', 'фирмой',
        'предприятие', 'предприятия', 'предприятию', 'предприятием'
    }
    
    # 4. Remove blacklisted entities
    print("Removing blacklisted entities...")
    initial_count = len(df)
    df = df[~df['Entity_canonical'].str.lower().isin(BLACKLIST)]
    print(f"Removed {initial_count - len(df):,} blacklisted entity mentions")
    
    # 5. Count occurrences per canonical entity (unique articles)
    print("Calculating entity occurrences...")
    entity_article_counts = df.groupby(['Entity_canonical', 'Entity_Type'])['Article_ID'].nunique().reset_index()
    entity_article_counts = entity_article_counts.rename(columns={'Article_ID': 'New_Occurrences'})
    
    print(f"Entity counts columns: {entity_article_counts.columns.tolist()}")
    print(f"Entity counts shape: {entity_article_counts.shape}")
    
    # 6. Filter entities with minimum occurrences
    entities_to_keep = entity_article_counts[entity_article_counts['New_Occurrences'] >= min_occurrences]
    print(f"Entities with >= {min_occurrences} occurrences: {len(entities_to_keep):,}")
    
    # Create set for faster lookup
    keep_entities = set(zip(entities_to_keep['Entity_canonical'], entities_to_keep['Entity_Type']))
    
    # 7. Filter main dataset
    df_filtered = df[df[['Entity_canonical', 'Entity_Type']].apply(tuple, axis=1).isin(keep_entities)].copy()
    print(f"Filtered dataset columns: {df_filtered.columns.tolist()}")
    
    # 8. Add occurrence counts to main dataset
    df_final = df_filtered.merge(
        entity_article_counts[['Entity_canonical', 'Entity_Type', 'New_Occurrences']], 
        on=['Entity_canonical', 'Entity_Type'], 
        how='left'
    )
    
    print(f"After merge columns: {df_final.columns.tolist()}")
    
    # 9. Handle column renaming properly
    if 'Occurrences' in df_final.columns:
        df_final = df_final.drop(columns=['Occurrences'])
        print("Dropped original 'Occurrences' column to avoid duplication")
    
    # 10. Drop old 'Entity' column BEFORE renaming 'Entity_canonical'
    if 'Entity' in df_final.columns:
        df_final = df_final.drop(columns=['Entity'])
        print("Dropped original 'Entity' column")
    
    # 11. Rename columns
    df_final = df_final.rename(columns={
        'Entity_canonical': 'Entity',
        'New_Occurrences': 'Occurrences'
    })
    
    # 12. Check what columns we actually have before reordering
    available_columns = df_final.columns.tolist()
    print(f"Available columns before reordering: {available_columns}")
    
    # 13. Reorder columns
    desired_columns = ['Article_ID', 'Date', 'Source', 'Entity', 'Entity_Type', 'Occurrences', 'Context_Text']
    columns_order = [col for col in desired_columns if col in available_columns]
    
    # Add any remaining columns that weren't in our desired list
    for col in available_columns:
        if col not in columns_order:
            columns_order.append(col)
    
    print(f"Final column order: {columns_order}")
    df_final = df_final[columns_order]
    
    # 14. Verify no duplicate column names
    if len(df_final.columns) != len(set(df_final.columns)):
        print("WARNING: Duplicate column names detected!")
        print(f"Columns: {df_final.columns.tolist()}")
        df_final = df_final.loc[:, ~df_final.columns.duplicated()]
        print(f"After removing duplicates: {df_final.columns.tolist()}")
    
    # 15. Sort by occurrences and entity name
    if 'Occurrences' in df_final.columns and 'Entity' in df_final.columns:
        df_final = df_final.sort_values(['Occurrences', 'Entity'], ascending=[False, True])
        print("Sorted by Occurrences and Entity")
    elif 'Occurrences' in df_final.columns:
        df_final = df_final.sort_values('Occurrences', ascending=False)
        print("Sorted by Occurrences only")
    
    df_final = df_final.reset_index(drop=True)
    
    # 16. Save cleaned dataset
    df_final.to_csv(output_file, index=False)
    
    # 17. Print summary statistics
    print(f"\n=== FINAL CLEANING SUMMARY ===")
    print(f"Original dataset: {len(df):,} rows")
    print(f"Final dataset: {len(df_final):,} rows")
    print(f"Reduction: {((len(df) - len(df_final)) / len(df) * 100):.1f}%")
    print(f"Unique entities before: {df['Entity_canonical'].nunique():,}")
    print(f"Unique entities after: {df_final['Entity'].nunique():,}")
    
    print(f"\nEntity type distribution:")
    print(df_final['Entity_Type'].value_counts())
    
    if 'Occurrences' in df_final.columns:
        print(f"\nTop 20 most frequent entities:")
        top_entities = df_final.groupby('Entity')['Occurrences'].first().sort_values(ascending=False).head(20)
        for entity, count in top_entities.items():
            print(f"{entity}: {count:,}")
    
    # 18. Show location filtering results
    print(f"\n=== LOCATION FILTERING RESULTS ===")
    location_entities = df_final[df_final['Entity_Type'] == 'LOC']
    if len(location_entities) > 0:
        print(f"Remaining location entities: {location_entities['Entity'].nunique():,}")
        print("\nTop 15 Russian locations:")
        top_locations = location_entities.groupby('Entity')['Occurrences'].first().sort_values(ascending=False).head(15)
        for location, count in top_locations.items():
            print(f"  {location}: {count:,}")
    
    print(f"\nFinal dataset saved to: {output_file}")
    return df_final

# Run the cleaning process
if __name__ == "__main__":
    cleaned_df = clean_and_filter_russian_locations(
        input_file='ner_entity_dataset_final_refined.csv',
        output_file='ner_entity_dataset_russian_locations_only.csv',
        min_occurrences=5
    )
    
    print("\n=== VERIFICATION ===")
    print("Checking for RDIF and location filtering:")
    if len(cleaned_df) > 0:
        # Check RDIF variants
        rdif_variants = cleaned_df[cleaned_df['Entity'].str.contains('РФПИ|фонд|RDIF', case=False, na=False)]['Entity'].unique()
        print(f"Found {len(rdif_variants)} fund-related entities")
        
        # Check location entities
        location_entities = cleaned_df[cleaned_df['Entity_Type'] == 'LOC']['Entity'].unique()
        print(f"Found {len(location_entities)} location entities (should be Russian only)")
        
        # Sample some location entities to verify they're Russian
        print("\nSample location entities (should all be Russian):")
        for i, location in enumerate(location_entities[:10]):
            count = cleaned_df[cleaned_df['Entity'] == location]['Occurrences'].iloc[0] if len(cleaned_df[cleaned_df['Entity'] == location]) > 0 else 0
            print(f"  {location}: {count:,} occurrences")
