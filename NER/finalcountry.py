import pandas as pd
import re

def final_manual_cleanup(input_file, output_file, min_occurrences=5):
    """
    Final manual cleanup to remove all remaining foreign locations
    """
    print("Loading dataset for final cleanup...")
    df = pd.read_csv(input_file)
    print(f"Initial dataset size: {len(df):,} rows")
    print(f"Unique entities before cleanup: {df['Entity'].nunique():,}")
    
    # Comprehensive manual blacklist for all remaining problematic entities
    MANUAL_BLACKLIST = {
        # Foreign capitals and major cities
        'эр-рияде', 'эр-рияда', 'эр-рияду', 'эр-риядом', 'эр-рияд',
        'вашингтоне', 'вашингтона', 'вашингтону', 'вашингтоном', 'вашингтон',
        'лондоне', 'лондона', 'лондону', 'лондоном', 'лондон',
        'париже', 'парижа', 'парижу', 'парижем', 'париж',
        'берлине', 'берлина', 'берлину', 'берлином', 'берлин',
        'токио', 'токио',
        'пекине', 'пекина', 'пекину', 'пекином', 'пекин',
        'сеуле', 'сеула', 'сеулу', 'сеулом', 'сеул',
        'дели', 'дели',
        'каире', 'каира', 'каиру', 'каиром', 'каир',
        'анкаре', 'анкары', 'анкару', 'анкарой', 'анкара',
        'тегеране', 'тегерана', 'тегерану', 'тегераном', 'тегеран',
        'багдаде', 'багдада', 'багдаду', 'багдадом', 'багдад',
        'дамаске', 'дамаска', 'дамаску', 'дамаском', 'дамаск',
        'тель-авиве', 'тель-авива', 'тель-авиву', 'тель-авивом', 'тель-авив',
        'иерусалиме', 'иерусалима', 'иерусалиму', 'иерусалимом', 'иерусалим',
        'дубае', 'дубая', 'дубаю', 'дубаем', 'дубай',
        'абу-даби',
        'доха', 'дохи', 'доху', 'дохой',
        'эр-кувейте', 'эр-кувейта', 'эр-кувейту', 'эр-кувейтом', 'эр-кувейт',
        'манаме', 'манамы', 'манаму', 'манамой',
        'маскате', 'маската', 'маскату', 'маскатом', 'маскат',
        'сане', 'саны', 'сану', 'саной', 'сана',
        'амане', 'амана', 'аману', 'аманом', 'аман',
        'бейруте', 'бейрута', 'бейруту', 'бейрутом', 'бейрут',
        'никосии', 'никосии', 'никосию', 'никосией', 'никосия',
        'афинах', 'афин', 'афинам', 'афинами', 'афины',
        'риме', 'рима', 'риму', 'римом', 'рим',
        'мадриде', 'мадрида', 'мадриду', 'мадридом', 'мадрид',
        'лиссабоне', 'лиссабона', 'лиссабону', 'лиссабоном', 'лиссабон',
        'амстердаме', 'амстердама', 'амстердаму', 'амстердамом', 'амстердам',
        'брюсселе', 'брюсселя', 'брюсселю', 'брюсселем', 'брюссель',
        'вене', 'вены', 'вену', 'веной', 'вена',
        'праге', 'праги', 'прагу', 'прагой', 'прага',
        'будапеште', 'будапешта', 'будапешту', 'будапештом', 'будапешт',
        'варшаве', 'варшавы', 'варшаву', 'варшавой', 'варшава',
        'стокгольме', 'стокгольма', 'стокгольму', 'стокгольмом', 'стокгольм',
        'осло', 'осло',
        'копенгагене', 'копенгагена', 'копенгагену', 'копенгагеном', 'копенгаген',
        'хельсинки', 'хельсинки',
        'рейкьявике', 'рейкьявика', 'рейкьявику', 'рейкьявиком', 'рейкьявик',
        'дублине', 'дублина', 'дублину', 'дублином', 'дублин',
        'валлетте', 'валлетты', 'валлетту', 'валлеттой', 'валлетта',
        'давосе', 'давоса', 'давосу', 'давосом', 'давос',
        'женеве', 'женевы', 'женеву', 'женевой', 'женева',
        'цюрихе', 'цюриха', 'цюриху', 'цюрихом', 'цюрих',
        'базеле', 'базеля', 'базелю', 'базелем', 'базель',
        'берне', 'берна', 'берну', 'берном', 'берн',
        
        # Asian countries and regions
        'южной корее', 'южной кореи', 'южную корею', 'южной кореей',
        'северной корее', 'северной кореи', 'северную корею', 'северной кореей',
        'китае', 'китая', 'китаю', 'китаем', 'китай', 'кнр',
        'японии', 'японии', 'японию', 'японией', 'япония',
        'индии', 'индии', 'индию', 'индией', 'индия',
        'пакистане', 'пакистана', 'пакистану', 'пакистаном', 'пакистан',
        'афганистане', 'афганистана', 'афганистану', 'афганистаном', 'афганистан',
        'иране', 'ирана', 'ирану', 'ираном', 'иран',
        'ираке', 'ирака', 'ираку', 'ираком', 'ирак',
        'сирии', 'сирии', 'сирию', 'сирией', 'сирия',
        'ливане', 'ливана', 'ливану', 'ливаном', 'ливан',
        'иордании', 'иордании', 'иорданию', 'иорданией', 'иордания',
        'израиле', 'израиля', 'израилю', 'израилем', 'израиль',
        'турции', 'турции', 'турцию', 'турцией', 'турция',
        
        # Regional terms and organizations
        'снг', 'содружество независимых государств',
        'латинской америки', 'латинской америке', 'латинскую америку',
        'южной америки', 'южной америке', 'южную америку',
        'северной америки', 'северной америке', 'северную америку',
        'центральной америки', 'центральной америке', 'центральную америку',
        'центральной азии', 'центральной азии', 'центральную азию',
        'юго-восточной азии', 'юго-восточной азии', 'юго-восточную азию',
        'восточной азии', 'восточной азии', 'восточную азию',
        'западной азии', 'западной азии', 'западную азию',
        'южной азии', 'южной азии', 'южную азию',
        'северной азии', 'северной азии', 'северную азию',
        'восточной европы', 'восточной европе', 'восточную европу',
        'западной европы', 'западной европе', 'западную европу',
        'северной европы', 'северной европе', 'северную европу',
        'южной европы', 'южной европе', 'южную европу',
        'центральной европы', 'центральной европе', 'центральную европу',
        'скандинавии', 'скандинавии', 'скандинавию', 'скандинавией',
        'балканах', 'балкан', 'балканам', 'балканами',
        'кавказе', 'кавказа', 'кавказу', 'кавказом',
        'закавказье', 'закавказья', 'закавказью', 'закавказьем',
        'средиземноморье', 'средиземноморья', 'средиземноморью', 'средиземноморьем',
        'персидском заливе', 'персидского залива', 'персидскому заливу',
        'аравийском полуострове', 'аравийского полуострова', 'аравийскому полуострову',
        'индийском субконтиненте', 'индийского субконтинента', 'индийскому субконтиненту',
        'индокитае', 'индокитая', 'индокитаю', 'индокитаем',
        'магрибе', 'магриба', 'магрибу', 'магрибом',
        'машрике', 'машрика', 'машрику', 'машриком',
        'левант', 'леванта', 'леванту', 'левантом', 'леванте',
        
        # Political/symbolic locations
        'белого дома', 'белом доме', 'белый дом', 'белому дому', 'белым домом',
        'капитолии', 'капитолия', 'капитолию', 'капитолием', 'капитолий',
        'пентагоне', 'пентагона', 'пентагону', 'пентагоном', 'пентагон',
        'уолл-стрит', 'уолл-стрита', 'уолл-стриту', 'уолл-стритом',
        'даунинг-стрит', 'даунинг-стрита', 'даунинг-стриту', 'даунинг-стритом',
        'елисейском дворце', 'елисейского дворца', 'елисейскому дворцу',
        'бундестаге', 'бундестага', 'бундестагу', 'бундестагом', 'бундестаг',
        'рейхстаге', 'рейхстага', 'рейхстагу', 'рейхстагом', 'рейхстаг',
        'ватикане', 'ватикана', 'ватикану', 'ватиканом', 'ватикан',
        
        # Generic directional/political terms
        'запад', 'запада', 'западу', 'западом', 'западе',
        'восток', 'востока', 'востоку', 'востоком', 'востоке',
        'север', 'севера', 'северу', 'севером', 'севере',
        'юг', 'юга', 'югу', 'югом', 'юге',
        'центр', 'центра', 'центру', 'центром', 'центре',
        'периферия', 'периферии', 'периферию', 'периферией',
        'провинция', 'провинции', 'провинцию', 'провинцией',
        'столица', 'столицы', 'столицу', 'столицей', 'столице',
        'метрополия', 'метрополии', 'метрополию', 'метрополией',
        'колония', 'колонии', 'колонию', 'колонией',
        'территория', 'территории', 'территорию', 'территорией',
        'регион', 'региона', 'региону', 'регионом', 'регионе',
        'зона', 'зоны', 'зону', 'зоной', 'зоне',
        'сектор', 'сектора', 'сектору', 'сектором', 'секторе',
        'округ', 'округа', 'округу', 'округом', 'округе',
        'район', 'района', 'району', 'районом', 'районе',
        'область', 'области', 'область', 'областью', 'области',
        'штат', 'штата', 'штату', 'штатом', 'штате',
        'провинция', 'провинции', 'провинцию', 'провинцией',
        'префектура', 'префектуры', 'префектуру', 'префектурой',
        'губерния', 'губернии', 'губернию', 'губернией',
        'княжество', 'княжества', 'княжеству', 'княжеством',
        'королевство', 'королевства', 'королевству', 'королевством',
        'империя', 'империи', 'империю', 'империей',
        'республика', 'республики', 'республику', 'республикой',
        'федерация', 'федерации', 'федерацию', 'федерацией',
        'конфедерация', 'конфедерации', 'конфедерацию', 'конфедерацией',
        'союз', 'союза', 'союзу', 'союзом', 'союзе',
        'блок', 'блока', 'блоку', 'блоком', 'блоке',
        'альянс', 'альянса', 'альянсу', 'альянсом', 'альянсе',
        'коалиция', 'коалиции', 'коалицию', 'коалицией',
        'группировка', 'группировки', 'группировку', 'группировкой',
        'объединение', 'объединения', 'объединению', 'объединением',
        'ассоциация', 'ассоциации', 'ассоциацию', 'ассоциацией',
        'организация', 'организации', 'организацию', 'организацией',
        'учреждение', 'учреждения', 'учреждению', 'учреждением',
        'институт', 'института', 'институту', 'институтом', 'институте',
        'центр', 'центра', 'центру', 'центром', 'центре',
        'агентство', 'агентства', 'агентству', 'агентством', 'агентстве',
        'служба', 'службы', 'службу', 'службой', 'службе',
        'ведомство', 'ведомства', 'ведомству', 'ведомством', 'ведомстве',
        'департамент', 'департамента', 'департаменту', 'департаментом', 'департаменте',
        'министерство', 'министерства', 'министерству', 'министерством', 'министерстве',
        'комитет', 'комитета', 'комитету', 'комитетом', 'комитете',
        'комиссия', 'комиссии', 'комиссию', 'комиссией', 'комиссии',
        'совет', 'совета', 'совету', 'советом', 'совете',
        'правление', 'правления', 'правлению', 'правлением', 'правлении',
        'управление', 'управления', 'управлению', 'управлением', 'управлении',
        'администрация', 'администрации', 'администрацию', 'администрацией',
        'правительство', 'правительства', 'правительству', 'правительством', 'правительстве',
        'парламент', 'парламента', 'парламенту', 'парламентом', 'парламенте',
        'сенат', 'сената', 'сенату', 'сенатом', 'сенате',
        'конгресс', 'конгресса', 'конгрессу', 'конгрессом', 'конгрессе',
        'ассамблея', 'ассамблеи', 'ассамблею', 'ассамблеей', 'ассамблее',
        'дума', 'думы', 'думе', 'думу', 'думой',
        'рада', 'рады', 'раде', 'раду', 'радой',
        'сейм', 'сейма', 'сейму', 'сеймом', 'сейме',
        'меджлис', 'меджлиса', 'меджлису', 'меджлисом', 'меджлисе',
        'курултай', 'курултая', 'курултаю', 'курултаем', 'курултае',
        'хурал', 'хурала', 'хуралу', 'хуралом', 'хурале',
        'собрание', 'собрания', 'собранию', 'собранием', 'собрании',
        'съезд', 'съезда', 'съезду', 'съездом', 'съезде',
        'конференция', 'конференции', 'конференцию', 'конференцией', 'конференции',
        'форум', 'форума', 'форуму', 'форумом', 'форуме',
        'саммит', 'саммита', 'саммиту', 'саммитом', 'саммите',
        'встреча', 'встречи', 'встречу', 'встречей', 'встрече',
        'переговоры', 'переговоров', 'переговорам', 'переговорами', 'переговорах',
        'консультации', 'консультаций', 'консультациям', 'консультациями', 'консультациях',
        'диалог', 'диалога', 'диалогу', 'диалогом', 'диалоге',
        'дискуссия', 'дискуссии', 'дискуссию', 'дискуссией', 'дискуссии',
        'дебаты', 'дебатов', 'дебатам', 'дебатами', 'дебатах',
        'обсуждение', 'обсуждения', 'обсуждению', 'обсуждением', 'обсуждении',
        'рассмотрение', 'рассмотрения', 'рассмотрению', 'рассмотрением', 'рассмотрении',
        'изучение', 'изучения', 'изучению', 'изучением', 'изучении',
        'исследование', 'исследования', 'исследованию', 'исследованием', 'исследовании',
        'анализ', 'анализа', 'анализу', 'анализом', 'анализе',
        'оценка', 'оценки', 'оценку', 'оценкой', 'оценке',
        'экспертиза', 'экспертизы', 'экспертизу', 'экспертизой', 'экспертизе',
        'мониторинг', 'мониторинга', 'мониторингу', 'мониторингом', 'мониторинге',
        'контроль', 'контроля', 'контролю', 'контролем', 'контроле',
        'надзор', 'надзора', 'надзору', 'надзором', 'надзоре',
        'проверка', 'проверки', 'проверку', 'проверкой', 'проверке',
        'инспекция', 'инспекции', 'инспекцию', 'инспекцией', 'инспекции',
        'аудит', 'аудита', 'аудиту', 'аудитом', 'аудите',
        'ревизия', 'ревизии', 'ревизию', 'ревизией', 'ревизии'
    }
    
    def normalize_entity_name(name):
        """Normalize entity name for matching"""
        name = str(name).lower()
        name = re.sub(r'[().,;:!?"\'\-]', '', name)
        name = name.strip()
        return name
    
    def is_blacklisted_entity(entity):
        """Check if entity should be removed"""
        entity_norm = normalize_entity_name(entity)
        return entity_norm in MANUAL_BLACKLIST
    
    # Filter out blacklisted entities
    print("Removing manually blacklisted entities...")
    initial_count = len(df)
    df_filtered = df[~df['Entity'].apply(is_blacklisted_entity)].copy()
    removed_count = initial_count - len(df_filtered)
    print(f"Removed {removed_count:,} blacklisted entity mentions")
    
    # Recalculate occurrences after filtering
    print("Recalculating entity occurrences...")
    entity_article_counts = df_filtered.groupby(['Entity', 'Entity_Type'])['Article_ID'].nunique().reset_index()
    entity_article_counts = entity_article_counts.rename(columns={'Article_ID': 'New_Occurrences'})
    
    # Filter entities with minimum occurrences
    entities_to_keep = entity_article_counts[entity_article_counts['New_Occurrences'] >= min_occurrences]
    print(f"Entities with >= {min_occurrences} occurrences: {len(entities_to_keep):,}")
    
    # Create set for faster lookup
    keep_entities = set(zip(entities_to_keep['Entity'], entities_to_keep['Entity_Type']))
    
    # Filter main dataset
    df_final = df_filtered[df_filtered[['Entity', 'Entity_Type']].apply(tuple, axis=1).isin(keep_entities)].copy()
    
    # Update occurrence counts
    df_final = df_final.merge(
        entity_article_counts[['Entity', 'Entity_Type', 'New_Occurrences']], 
        on=['Entity', 'Entity_Type'], 
        how='left'
    )
    
    # Clean up columns
    if 'Occurrences' in df_final.columns:
        df_final = df_final.drop(columns=['Occurrences'])
    df_final = df_final.rename(columns={'New_Occurrences': 'Occurrences'})
    
    # Sort by occurrences
    df_final = df_final.sort_values(['Occurrences', 'Entity'], ascending=[False, True])
    df_final = df_final.reset_index(drop=True)
    
    # Save cleaned dataset
    df_final.to_csv(output_file, index=False)
    
    # Print summary statistics
    print(f"\n=== FINAL MANUAL CLEANUP SUMMARY ===")
    print(f"Original dataset: {len(df):,} rows")
    print(f"Final dataset: {len(df_final):,} rows")
    print(f"Reduction: {((len(df) - len(df_final)) / len(df) * 100):.1f}%")
    print(f"Unique entities before: {df['Entity'].nunique():,}")
    print(f"Unique entities after: {df_final['Entity'].nunique():,}")
    
    print(f"\nEntity type distribution:")
    print(df_final['Entity_Type'].value_counts())
    
    # Show top entities
    print(f"\nTop 20 most frequent entities:")
    top_entities = df_final.groupby('Entity')['Occurrences'].first().sort_values(ascending=False).head(20)
    for entity, count in top_entities.items():
        print(f"{entity}: {count:,}")
    
    # Show location filtering results
    print(f"\n=== LOCATION VERIFICATION ===")
    location_entities = df_final[df_final['Entity_Type'] == 'LOC']
    if len(location_entities) > 0:
        print(f"Remaining location entities: {location_entities['Entity'].nunique():,}")
        print("\nTop 15 remaining locations (should ALL be Russian now):")
        top_locations = location_entities.groupby('Entity')['Occurrences'].first().sort_values(ascending=False).head(15)
        for location, count in top_locations.items():
            print(f"  {location}: {count:,}")
    
    print(f"\nFinal dataset saved to: {output_file}")
    return df_final

# Run the final cleanup
if __name__ == "__main__":
    cleaned_df = final_manual_cleanup(
        input_file='ner_entity_dataset_truly_russian_only.csv',  # Your current file
        output_file='ner_entity_dataset_final_clean.csv',       # Final output
        min_occurrences=5
    )
    
    print("\n=== FINAL VERIFICATION CHECK ===")
    print("Checking if ALL problematic entities were removed:")
    
    # Check all the problematic entities from your list
    problematic_entities = [
        'Эр-Рияде', 'Вашингтоне', 'СНГ', 'Белого дома', 'Южной Корее', 
        'Латинской Америки', 'Лондоне', 'ДАВОС', 'Запад'
    ]
    
    all_removed = True
    for entity in problematic_entities:
        if entity in cleaned_df['Entity'].values:
            print(f"❌ {entity}: Still present")
            all_removed = False
        else:
            print(f"✅ {entity}: Successfully removed")
    
    if all_removed:
        print("\n🎉 SUCCESS: All problematic foreign locations have been removed!")
        print("Your dataset now contains only Russian locations and other relevant entities.")
    else:
        print("\n⚠️  Some entities may still need manual review.")
